cli:
  description: '🌍 auto-i18n: 一个用于管理项目中 i18n 的 CLI 工具。'
  help: 该工具帮助你从代码中提取可翻译的字符串，管理翻译，并与 GPT 集成以实现自动翻译。
cli_py:
  force_cover_config: 如果配置文件已存在, 强制覆盖
  specifyinputfile: 指定输入文件, 读取文本后将翻译结果输出到另一个文件中
  specifyinputfilepath: 指定输入文件路径
  specifyoutputfilepath: 指定输出文件路径
  specifytargetlang: 指定翻译目标语言
config:
  description: ⚙️ 管理配置设置。
  getter:
    description: 🔍 获取特定配置值。
    error:
      not_found: ❌ 配置中未找到键 '{key}'
      specify: ❌ 请指定 --global 或 --project
    help: 该命令检索特定配置键的值。你必须指定 --global 或 --project。
    options:
      global: 从全局配置中获取值。
      project: 从项目特定的配置中获取值。
  help: 该命令组允许你查看和修改全局和项目特定的配置。
  list:
    description: 📋 列出配置设置。
    error: ❌ 请指定 --global 或 --project
    help: 该命令显示全局或项目特定的配置。你必须指定 --global 或 --project。
    options:
      global: 列出全局配置。
      project: 列出项目特定的配置。
  setter:
    description: ✏️ 设置配置值。
    error:
      specify: ❌ 请指定 --global 或 --project
    help: 该命令设置特定配置键的值。你必须指定 --global 或 --project。
    options:
      global: 在全局配置中设置值。
      project: 在项目特定的配置中设置值。
    success: ✅ 配置已更新：{key} = {value}
errors:
  connection_failed: ❌ 连接失败。发送请求到 GPT 时出错：{error}
  invalid_response: ❌ 错误：API 返回了无效的 GPT 响应。请检查你的 API 密钥和端点。
export:
  description: 📤 导出 i18n 文件为其他格式。
  help: 该命令将主 i18n 文件导出为其他格式，目前支持 TypeScript 接口 (.d.ts)。
  invalid_key: ⚠️ 键 '{key}' 不是有效的标识符，它将被双引号包围。
  no_data: ❌ 主文件中未找到 i18n 数据，导出中止。
  options:
    format: 要导出的格式（目前仅支持 'd.ts'）。
  start: 🔍 开始导出过程...
  success: ✅ 已导出 i18n 接口到 {file}
  unsupported_format: ❌ 不支持的导出格式：{format}
extract:
  description: 🔍 从代码文件中提取 i18n 文本。
  failed: ❌ 提取 i18n 失败 {file}，GPT 响应不是有效的 JSON。
  help: 该命令扫描指定目录（默认：当前目录）中的代码文件，并根据配置的模式提取可翻译的字符串。
  options:
    dir: 要扫描代码文件的目录（默认：当前目录）。
  start: 🔍 开始提取过程...
  success: ✅ 更新主 i18n 文件：{file}
extractpy:
  avoidconflict: 为了避免冲突, 将 {0} 重命名为 {1}
  duplicatekey: ⚠️ {key} 在 {code_fname} 下重复了!
  extractionfail: '提取失败, GPT 没有返回一个正确的 JSON 文本, 以下是 GPT 的回答: {result}'
  notfoundi18nvar: 没有在 {code_file} 中找到 i18n 变量
  noupdatei18nfile: 无需更新 i18n 文件
  updatei18nfile: '⬆️ 更新 i18n 文件: {main_file_path}'
gpt_py:
  sendingrequesttogpt: 正在向 GPT 发送请求
init:
  already_exists: ℹ️ 项目配置文件已存在。
  description: 🚀 初始化项目配置。
  help: 该命令在当前目录中创建一个新的项目配置文件 (auto-i18n.project.yaml)。如果文件已存在，则不会被覆盖。
  success: ✅ 项目配置文件创建成功。
project_config_doc: |
  * `i18n_dir`: 存放翻译文件的目录
  * `main_file`: 主要语言的翻译文件
  * `code_files`: 需要扫描的代码文件类型
  * `i18n_pattern`: 在代码中标记需要翻译的文本的模式
  * `dict`: 特殊词汇的翻译对照表；你可以把项目中涉及到的一些属于翻译写在这个地方
  * `strategy`: 翻译策略
    * `"diff"` 表示只翻译新增的内容
    * `"full"` 表示翻译所有内容
  * `i18n_var_prefix`: 在代码中使用的替换变量的前缀
  * `export_dir`: 导出目录，如果设置，将用作 export 命令的输出目录
  * `i18n_var_mid`: i18n 键的中间部分生成策略。选项包括：
    * `"filename"`: 使用完整文件名，包含扩展名，如 `utilsts`
    * `"filename_noext"`: 使用不带扩展名的文件名
    * `"pathname"`: 使用文件的相对路径
testgpt:
  description: 🧪 测试与 GPT 的连接。
  failed: ❌ GPT 请求失败。
  help: 该命令向配置的 GPT 端点发送测试消息，以验证连接和身份验证是否正常工作。
  start: 🔍 测试 GPT，发送：Hello, how are you?
  success: ✅ GPT 响应：{response}
translate:
  description: 🔄 翻译 i18n 文件。
  failed: ❌ 翻译 {file} 失败，结果不是有效的 JSON。
  help: 该命令将主 i18n 文件翻译为其他语言文件。它可以翻译整个文件或仅翻译差异（基于策略）。
  no_data: ❌ 主文件中未找到 i18n 数据，翻译中止。
  no_prompt: ❌ 全局配置中未找到提示，翻译中止。
  options:
    diff: 仅翻译差异（默认情况下）。
    full: 翻译整个文件。
  start: 🔍 开始翻译过程...
  success: ✅ 翻译并更新 {file}
translate_py:
  translationcompleted: ✅ 翻译完成!
  writefile: '写入文件: '
translatepy:
  getgpttranslationresult: '获取 GPT 翻译结果:'
  notranslationcontent: 无需要翻译的内容, 如果你认为有必要更新，可以使用 --full 策略
  starttranslationfile: 开始翻译 {file}
  usediffstrategy: 使用 diff 策略, 提取需要翻译的部分
